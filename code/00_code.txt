rm(list=ls())
setwd("C:/Users/MAC/Desktop/sisi")

# 选择其他包
library(INLA)
packages <- c("data.table", "tidyverse", "sf", "sp", "spdep",
              "dlnm", "tsModel", "hydroGOF", "RColorBrewer", 
              "geofacet", "ggpubr", "ggthemes")

# 安装包
# lapply(packages, install.packages, character.only = TRUE)

# 加载包
lapply(packages, library, character.only = TRUE)

data <- read_csv("C:/Users/MAC/Desktop/sisi/ModellingData.csv")

### 选择州和时间段
data <- data[data$STATEcode == 25, ]
data <- data[data$Year > 2016 & data$Year < 2020, ]

## 加载数据

# 加载形状文件 
map_all <- read_sf("C:/Users/MAC/Desktop/sisi/tl_2023_us_county/tl_2023_us_county.shp")
data$GEOID <- as.character(data$GEOID)
map <- map_all[map_all$GEOID %in% unique(data$GEOID), ]

# 创建邻接矩阵
sf::sf_use_s2(FALSE) # 修复具有无效球面几何形状的特征
nb.map <- poly2nb(as_Spatial(map$geometry))

# 确保目录存在
dir.create("Iowa", showWarnings = FALSE)
g.file <- "Iowa/map.graph"
nb2INLA(g.file, nb.map)

## 整合数据
# 创建滞后变量

# 设置最大滞后 - 按天
nlag <- 14

lag_heat <- tsModel::Lag(data$HeatCount, group = data$GEOID, k = 0:nlag)
lag_prec <- tsModel::Lag(data$Precipitation, group = data$GEOID, k = 0:nlag)
lag_airpoll <- tsModel::Lag(data$AirPolllution, group = data$GEOID, k = 0:nlag)
lag_stringency <- tsModel::Lag(data$StringencyIndex, group = data$GEOID, k = 0:nlag)

lag_heat <- lag_heat[data$Week > 20, ]
lag_prec <- lag_prec[data$Week > 20, ]
lag_airpoll <- lag_airpoll[data$Week > 20, ]
lag_stringency <- lag_stringency[data$Week > 20, ]
# 移除没有滞后的前两周
data <- data[data$Week > 20, ]

## 定义维度
# 重新定义时间指示符 
unique(data$Date)

# 总天数
nday <- length(unique(data$Date))
# 总周数
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
data <- data %>%
  mutate(week2 = as.integer(difftime(Date, min(Date), units = "weeks")) + 1)

nweek <- length(unique(data$week2))

# 总城市数
ncity <- length(unique(data$GEOID))

# 检查 data$StringencyIndex 中是否有 NA、NaN 或 Inf 值
sum(is.na(data$StringencyIndex)) # 检查 NA 值的数量
sum(is.nan(data$StringencyIndex)) # 检查 NaN 值的数量
sum(is.infinite(data$StringencyIndex)) # 检查 Inf 值的数量

# 处理 NA、NaN 和 Inf 值，例如将它们替换为平均值（或其他合适的值）
data$StringencyIndex[is.na(data$StringencyIndex)] <- mean(data$StringencyIndex, na.rm = TRUE)
data$StringencyIndex[is.nan(data$StringencyIndex)] <- mean(data$StringencyIndex, na.rm = TRUE)
data$StringencyIndex[is.infinite(data$StringencyIndex)] <- mean(data$StringencyIndex, na.rm = TRUE)

# 重新创建滞后变量和 crossbasis 矩阵
var <- tsModel::Lag(data$StringencyIndex, group = data$GEOID, k = 0:nlag)
var <- var[data$Week > 20, ]

# 定义交叉基矩阵（结合非线性暴露和滞后函数）
# 设置滞后节点
lagknot = equalknots(0:nlag, 2)

var <- lag_heat
basis_heat <- crossbasis(var,
                         argvar = list(fun = "ns", knots = equalknots(data$HeatCount, 2)),
                         arglag = list(fun = "ns", knots = nlag / 2))
head(basis_heat)

var <- lag_prec
basis_prec <- crossbasis(var,
                         argvar = list(fun = "ns", knots = equalknots(data$Precipitation, 2)),
                         arglag = list(fun = "ns", knots = nlag / 2))
head(basis_prec)

var <- lag_airpoll
basis_air <- crossbasis(var,
                        argvar = list(fun = "ns", knots = equalknots(data$AirPolllution, 2)),
                        arglag = list(fun = "ns", knots = nlag / 2))
head(basis_air)

basis_Stringency <- crossbasis(var,
                               argvar = list(fun = "ns", knots = equalknots(data$StringencyIndex, 2)),
                               arglag = list(fun = "ns", knots = lagknot))
head(basis_Stringency)

# 为 inla() 模型分配唯一的列名到交叉基矩阵
# 注意：对于 glm()、gam() 或 glm.nb() 模型不是必须的
colnames(basis_heat) <- paste0("basis_heat.", colnames(basis_heat))
colnames(basis_prec) <- paste0("basis_prec.", colnames(basis_prec))
colnames(basis_air) <- paste0("basis_air.", colnames(basis_air))
colnames(basis_Stringency) <- paste0("basis_Stringency.", colnames(basis_Stringency))

# 创建城市索引 
data$county_index <- rep(1:ncity, nday)

# 创建省级索引
# 州长度
k <- unique(data$STATEcode)
for (j in 1:1) {
  data$STATEcode[data$STATEcode == k[j]] <- j 
}

# 创建周索引
# 将建模的第一周设置为 1
data$week_index <- data$week2
data$weekday <- as.integer(format(data$Date, "%u"))

#### 设置 INLA 模型的数据和先验
Y <- data$SentimentScore # 响应变量
N <- length(Y) # 数据点总数

# 随机变量
T1 <- data$weekday # 考虑每周天效应的随机效应
T2 <- data$week_index # 考虑周间变异性的随机效应
S1 <- data$county_index # 考虑县级空间随机效应
S2 <- data$STATEcode # 考虑州与日随机效应的交互作用
# 其他变量
Vv <- data$VulnerabilityIndex
Vheat <- data$HeatCount
Vprec <- data$Precipitation
Vair <- data$AirPolllution
Vstring <- data$StringencyIndex
Vh <- data$Holiday

# 创建模型测试的数据框
df <- data.frame(Y, T1, T2, S1, S2, Vv, Vh, Vheat, Vprec, Vair, Vstring)

# 定义先验
precision.prior2 <- list(prec = list(prior = "pc.prec", param = c(1, 0.01)))

# INLA 模型函数
# 包括公式并设置数据、分布族（允许其他概率分布模型，如 Poisson）和配置的默认值（允许采样）
mymodel <- function(formula, data = df, family = "Gaussian", config = FALSE) {
  model <- inla(formula = formula, data = data, family = family, 
                control.inla = list(strategy = 'adaptive', int.strategy = 'eb'), 
                control.compute = list(dic = TRUE, config = config, 
                                       cpo = TRUE, return.marginals = FALSE),
                control.fixed = list(correlation.matrix = TRUE, 
                                     prec.intercept = 1, prec = 1),
                control.predictor = list(link = 1, compute = TRUE), 
                verbose = FALSE)
  model <- inla.rerun(model)
  return(model)
}